name: "Rust"

on:
  push:
    branches: [ master ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ master ]
    tags:
      - 'v*.*.*'
    
env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: --cfg=web_sys_unstable_apis

jobs:
  check:
    name: "Build on OS: ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          #- macOS-latest
          #- ubuntu-latest

    steps:
      - name: "Checkout repository and submodules"
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: "Install LLVM and Clang" # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: ${{ matrix.os }} == 'windows-latest'
        with:
          version: "13.0"
          directory: ${{ runner.temp }}/llvm

      - name: "Set LIBCLANG_PATH"
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: ${{ matrix.os }} == 'windows-latest'

      - name: "Install stable toolchain"
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          override: true
          components: rustfmt, clippy
          
      - name: "Add rust target wasm32"
        run: rustup target add wasm32-unknown-unknown
          
      - name: "Install wasm bindgen"
        run: cargo install wasm-bindgen-cli

      - name: "Enable use of cache"
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./crates/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo update
        run: cargo update --manifest-path ./crates/Cargo.toml

      #- name: "Run cargo fmt check"
      # uses: actions-rs/cargo@v1
      # with:
      #   command: fmt
      #   args: --manifest-path ./crates/Cargo.toml --no-deps -- --check
          
      - name: "Run cargo clippy check"
        uses: actions-rs/cargo@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: clippy
          args: --manifest-path ./crates/Cargo.toml --no-deps -- -D warnings


      #- name: "Install cargo-udeps"
      #  uses: actions-rs/cargo@v1
      #  with:
      #    command: install
      #    args: cargo-udeps

      #- name: "Detect unused dependencies with cargo-udeps"
      #  run: cargo +nightly udeps --manifest-path ./crates/Cargo.toml --all-targets

      - name: "Run cargo build workspace release"
        uses: actions-rs/cargo@v1
        with:
          command: build 
          args: --manifest-path ./crates/Cargo.toml --release

      - name: "Run cargo build workspace release wasm32"
        uses: actions-rs/cargo@v1
        with:
          command: build 
          args: --manifest-path ./crates/Cargo.toml --release --target wasm32-unknown-unknown
      
      - name: "Creating folders"
        run: |
          mkdir -p "./output/"
          mkdir -p "./output/web/"
          mkdir -p "./output/INOX/"
          mkdir -p "./output/INOX/bin/"
          mkdir -p "./output/INOX/bin/data_raw/"

      - name: "Run wasm bindgen"
        run: wasm-bindgen ./crates/target/wasm32-unknown-unknown/release/inox_launcher.wasm --out-dir ./output/web/ --target web --no-typescript

      - name: "Copy wasm in web"
        run: |
          cp -r "./crates/target/wasm32-unknown-unknown/release/inox_launcher.wasm" "./output/web/inox_launcher.wasm"

      - name: "Copy wasm32 in output"
        run: |
          cp -r "./index.html" "./output/web/"

      - name: "Copy and rename inox_blender dll into pyd"
        run: |
          find ./crates/target/release/ -type f -name "inox_blender.dll" | while read fname; do
            dirname=`dirname "$fname"`
            filename=`basename "$fname"`
            cp "${dirname}/$filename" "./crates/blender/inox_blender/INOX/inox_blender.pyd"
          done

      - name: "Copy inox_blender in INOX"
        run: |
          cp -r "./crates/blender/inox_blender/INOX/" "./output/"
          
      - name: "Copy inox_viewer configs in output"
        run: |
          mkdir -p "./output/INOX/bin/data_raw/config/"
          mkdir -p "./output/INOX/bin/data_raw/config/inox_viewer/"
          cp -r "./data_raw/config/inox_viewer/" "./output/INOX/bin/data_raw/config/"

      - name: "Copy pipelines in output"
        run: |
          mkdir -p "./output/INOX/bin/data_raw/pipelines/"
          cp -r "./data_raw/pipelines/" "./output/INOX/bin/data_raw/"

      - name: "Copy shaders in output"
        run: |
          mkdir -p "./output/INOX/bin/data_raw/shaders/"
          cp -r "./data_raw/shaders/" "./output/INOX/bin/data_raw/"

      - name: "Copy .dll in output"
        run: |
          find ./crates/target/release/ -maxdepth 1 -type f -name *.dll | while read fname; do
            dirname=`dirname "$fname"`
            filename=`basename "$fname"`
            cp "${dirname}/$filename" "./output/INOX/bin/$filename"
          done
          
      - name: "Copy .exes in output"
        run: |
          find ./crates/target/release/ -maxdepth 1 -type f -name *.exe | while read fname; do
            dirname=`dirname "$fname"`
            filename=`basename "$fname"`
            cp "${dirname}/$filename" "./output/INOX/bin/$filename"
          done
          
      - name: "Upload artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: output-binaries
          path: output/
