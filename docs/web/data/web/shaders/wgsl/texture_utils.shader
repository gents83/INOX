{"spirv_code":[],"wgsl_code":"@group(2) @binding(0)\nvar default_sampler: sampler;\n@group(2) @binding(1)\nvar unfiltered_sampler: sampler;\n@group(2) @binding(2)\nvar depth_sampler: sampler_comparison;\n\n@group(2) @binding(3)\nvar texture_1: texture_2d_array<f32>;\n@group(2) @binding(4)\nvar texture_2: texture_2d_array<f32>;\n@group(2) @binding(5)\nvar texture_3: texture_2d_array<f32>;\n@group(2) @binding(6)\nvar texture_4: texture_2d_array<f32>;\n@group(2) @binding(7)\nvar texture_5: texture_2d_array<f32>;\n@group(2) @binding(8)\nvar texture_6: texture_2d_array<f32>;\n@group(2) @binding(9)\nvar texture_7: texture_2d_array<f32>;\n@group(2) @binding(10)\nvar texture_8: texture_2d_array<f32>;\n\n\nfn sample_texture(tex_coords_and_texture_index: vec3<f32>) -> vec4<f32> {\n    let texture_data_index = i32(tex_coords_and_texture_index.z);\n    var tex_coords = vec3<f32>(0.0, 0.0, 0.0);\n    if (texture_data_index < 0) {\n        return vec4<f32>(tex_coords, 0.);\n    }\n    let texture = &textures.data[texture_data_index];\n    let atlas_index = (*texture).texture_index;\n    let layer_index = i32((*texture).layer_index);\n\n    tex_coords.x = ((*texture).area.x + tex_coords_and_texture_index.x * (*texture).area.z) / (*texture).total_width;\n    tex_coords.y = ((*texture).area.y + tex_coords_and_texture_index.y * (*texture).area.w) / (*texture).total_height;\n    tex_coords.z = f32(layer_index);\n\n    switch (atlas_index) {\n        default { return textureSampleLevel(texture_1, default_sampler, tex_coords.xy, layer_index, tex_coords.z); }\n        case 1u: { return textureSampleLevel(texture_2, default_sampler, tex_coords.xy, layer_index, tex_coords.z); }\n        case 2u: { return textureSampleLevel(texture_3, default_sampler, tex_coords.xy, layer_index, tex_coords.z); }\n        case 3u: { return textureSampleLevel(texture_4, default_sampler, tex_coords.xy, layer_index, tex_coords.z); }\n        case 4u: { return textureSampleLevel(texture_5, default_sampler, tex_coords.xy, layer_index, tex_coords.z); }\n        case 5u: { return textureSampleLevel(texture_6, default_sampler, tex_coords.xy, layer_index, tex_coords.z); }\n        case 6u: { return textureSampleLevel(texture_7, default_sampler, tex_coords.xy, layer_index, tex_coords.z); }\n        case 7u: { return textureSampleLevel(texture_8, default_sampler, tex_coords.xy, layer_index, tex_coords.z); }\n    }\n}\n\n\n\nfn load_texture(tex_coords_and_texture_index: vec3<i32>) -> vec4<f32> {\n    let atlas_index = tex_coords_and_texture_index.z;\n    let layer_index = 0;\n\n    switch (atlas_index) {\n        default { return textureLoad(texture_1, tex_coords_and_texture_index.xy, layer_index, layer_index); }\n        case 1: { return textureLoad(texture_2, tex_coords_and_texture_index.xy, layer_index, layer_index); }\n        case 2: { return textureLoad(texture_3, tex_coords_and_texture_index.xy, layer_index, layer_index); }\n        case 3: { return textureLoad(texture_4, tex_coords_and_texture_index.xy, layer_index, layer_index); }\n        case 4: { return textureLoad(texture_5, tex_coords_and_texture_index.xy, layer_index, layer_index); }\n        case 5: { return textureLoad(texture_6, tex_coords_and_texture_index.xy, layer_index, layer_index); }\n        case 6: { return textureLoad(texture_7, tex_coords_and_texture_index.xy, layer_index, layer_index); }\n        case 7: { return textureLoad(texture_8, tex_coords_and_texture_index.xy, layer_index, layer_index); }\n    }\n}\n\nfn get_uv(uvs: vec4<f32>, texture_index: u32, coords_set: u32) -> vec3<f32> {\n    //var uv = unpack2x16float(u32(uvs.x));\n    //if (coords_set == 1u) {\n    //    uv = unpack2x16float(u32(uvs.y));\n    //} else if (coords_set == 2u) {\n    //    uv = unpack2x16float(u32(uvs.z));\n    //} else if (coords_set == 3u) {\n    //    uv = unpack2x16float(u32(uvs.w));\n    //}\n    var uv = uvs.xy;\n    if (coords_set == 1u) {\n        uv = uvs.zw;\n    }\n    return vec3<f32>(uv, f32(texture_index));\n}\n"}