{"spirv_code":[],"wgsl_code":"\nstruct ConstantData {\n    view: mat4x4<f32>,\n    proj: mat4x4<f32>,\n    screen_width: f32,\n    screen_height: f32,\n    flags: u32,\n};\n\n\nstruct MeshletData {\n    center: vec3<f32>,\n    radius: f32,\n    cone_axis: vec3<f32>,\n    cone_cutoff: f32,\n    vertices_count: u32,\n    vertices_offset: u32,\n    indices_count: u32,\n    indices_offset: u32,\n};\n\nstruct CullPassData {\n    meshlets: array<MeshletData>,\n};\n\n@group(0) @binding(0)\nvar<uniform> constant_data: ConstantData;\n@group(0) @binding(1)\nvar<storage, read> cull_pass_data: CullPassData;\n\nfn cone_culling(meshlet: MeshletData, camera_position: vec3<f32>) -> bool {\n    let direction = meshlet.center - camera_position;\n    return dot(direction, meshlet.cone_axis) >= meshlet.cone_cutoff * length(direction) + meshlet.radius;\n}\n\n@compute\n@workgroup_size(32, 1, 1)\nfn main(@builtin(local_invocation_id) local_invocation_id: vec3<u32>, @builtin(local_invocation_index) local_invocation_index: u32, @builtin(global_invocation_id) global_invocation_id: vec3<u32>, @builtin(workgroup_id) workgroup_id: vec3<u32>) {\n    let total = arrayLength(&cull_pass_data.meshlets);\n    let local_id = local_invocation_id.x;\n    let local_index = local_invocation_index;\n    let global_id = global_invocation_id.x;\n    let wkgrp_id = workgroup_id.x;\n    if (local_invocation_index >= total) {\n        return;\n    }\n}\n"}