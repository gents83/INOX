{
  "spirv_code": [],
  "wgsl_code": "struct VertexOutput {\n    @builtin(position) clip_position: vec4<f32>,\n    @location(0) uv: vec2<f32>,\n};\n\nstruct FragmentOutput {\n    @location(0) color: vec4<f32>,\n};\n\n@group(0) @binding(0)\nvar source_texture: texture_2d<f32>;\n\n\n@vertex\nfn vs_main(@builtin(vertex_index) in_vertex_index: u32) -> VertexOutput {\n    //only one triangle, exceeding the viewport size\n    let uv = vec2<f32>(f32((in_vertex_index << 1u) & 2u), f32(in_vertex_index & 2u));\n    let pos = vec4<f32>(uv * vec2<f32>(2., -2.) + vec2<f32>(-1., 1.), 0., 1.);\n\n    var vertex_out: VertexOutput;\n    vertex_out.clip_position = pos;\n    vertex_out.uv = uv;\n    return vertex_out;\n}\n\n@fragment\nfn fs_main(v_in: VertexOutput) -> @location(0) vec4<f32> {\n    let d = vec2<f32>(textureDimensions(source_texture));\n    let pixel_coords = vec2<i32>(i32(v_in.uv.x * d.x + 0.5), i32(v_in.uv.y * d.y + 0.5));\n\n    let texture_color = textureLoad(source_texture, pixel_coords, 0);     \n    return texture_color;\n}\n"
}