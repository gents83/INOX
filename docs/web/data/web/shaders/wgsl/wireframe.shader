{"spirv_code":[],"wgsl_code":"struct ConstantData {\n    view: mat4x4<f32>,\n    proj: mat4x4<f32>,\n    screen_width: f32,\n    screen_height: f32,\n    flags: u32,\n};\n\nstruct VertexInput {\n    //@builtin(vertex_index) index: u32,\n    @location(0) position: vec3<f32>,\n    @location(1) color: u32,\n};\n\nstruct InstanceInput {\n    //@builtin(instance_index) index: u32,\n    @location(2) draw_area: vec4<f32>,\n    @location(3) model_matrix_0: vec4<f32>,\n    @location(4) model_matrix_1: vec4<f32>,\n    @location(5) model_matrix_2: vec4<f32>,\n    @location(6) model_matrix_3: vec4<f32>,\n};\n\nstruct VertexOutput {\n    @builtin(position) clip_position: vec4<f32>,\n    @location(0) color: vec4<f32>,\n};\n\n\n@group(0) @binding(0)\nvar<uniform> constant_data: ConstantData;\n\nfn rgba_from_integer(color: u32) -> vec4<f32> {\n    return vec4<f32>(\n        f32(color & 255u),\n        f32((color >> 8u) & 255u),\n        f32((color >> 16u) & 255u),\n        f32((color >> 24u) & 255u),\n    );\n}\n\n@vertex\nfn vs_main(\n    v: VertexInput,\n    instance: InstanceInput,\n) -> VertexOutput {\n    let instance_matrix = mat4x4<f32>(\n        instance.model_matrix_0,\n        instance.model_matrix_1,\n        instance.model_matrix_2,\n        instance.model_matrix_3,\n    );\n\n    var vertex_out: VertexOutput;\n    vertex_out.clip_position = constant_data.proj * constant_data.view * instance_matrix * vec4<f32>(v.position, 1.0);\n\n    let color = rgba_from_integer(v.color);\n    vertex_out.color = color;\n\n    return vertex_out;\n}\n\n@fragment\nfn fs_main(v_in: VertexOutput) -> @location(0) vec4<f32> {\n    return v_in.color;\n}\n"}