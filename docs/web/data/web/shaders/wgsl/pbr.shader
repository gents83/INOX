{"spirv_code":[],"wgsl_code":"let MAX_TEXTURE_ATLAS_COUNT: u32 = 16u;\nlet MAX_NUM_LIGHTS: u32 = 64u;\nlet MAX_NUM_TEXTURES: u32 = 512u;\nlet MAX_NUM_MATERIALS: u32 = 512u;\n\nlet TEXTURE_TYPE_BASE_COLOR: u32 = 0u;\nlet TEXTURE_TYPE_METALLIC_ROUGHNESS: u32 = 1u;\nlet TEXTURE_TYPE_NORMAL: u32 = 2u;\nlet TEXTURE_TYPE_EMISSIVE: u32 = 3u;\nlet TEXTURE_TYPE_OCCLUSION: u32 = 4u;\nlet TEXTURE_TYPE_SPECULAR_GLOSSINESS: u32 = 5u;\nlet TEXTURE_TYPE_DIFFUSE: u32 = 6u;\nlet TEXTURE_TYPE_EMPTY_FOR_PADDING: u32 = 7u;\nlet TEXTURE_TYPE_COUNT: u32 = 8u;\n\nlet CONSTANT_DATA_FLAGS_NONE: u32 = 0u;\nlet CONSTANT_DATA_FLAGS_SUPPORT_SRGB: u32 = 1u;\n\nlet PI = 3.14159265359;\n\nstruct ConstantData {\n    view: mat4x4<f32>,\n    proj: mat4x4<f32>,\n    screen_width: f32,\n    screen_height: f32,\n    flags: u32,\n};\n\nstruct LightData {\n    position: vec3<f32>,\n    light_type: u32,\n    color: vec4<f32>,\n    intensity: f32,\n    range: f32,\n    inner_cone_angle: f32,\n    outer_cone_angle: f32,\n};\n\nstruct TextureData {\n    texture_index: u32,\n    layer_index: u32,\n    total_width: f32,\n    total_height: f32,\n    area: vec4<f32>,\n};\n\nstruct ShaderMaterialData {\n    textures_indices: array<i32, 8>,//TEXTURE_TYPE_COUNT>,\n    textures_coord_set: array<u32, 8>,//TEXTURE_TYPE_COUNT>,\n    roughness_factor: f32,\n    metallic_factor: f32,\n    alpha_cutoff: f32,\n    alpha_mode: u32,\n    base_color: vec4<f32>,\n    emissive_color: vec4<f32>,\n    diffuse_color: vec4<f32>,\n    specular_color: vec4<f32>,\n};\n\nstruct DynamicData {\n    textures_data: array<TextureData, 512>,//MAX_NUM_TEXTURES>,\n    materials_data: array<ShaderMaterialData, 512>,//MAX_NUM_MATERIALS>,\n    lights_data: array<LightData, 64>,//MAX_NUM_LIGHTS>,\n};\n\n\nstruct VertexInput {\n    //@builtin(vertex_index) index: u32,\n    @location(0) position: vec3<f32>,\n    @location(1) normal: vec3<f32>,\n    @location(2) color: vec4<f32>,\n    @location(3) tex_coords_0: vec2<f32>,\n    @location(4) tex_coords_1: vec2<f32>,\n    @location(5) tex_coords_2: vec2<f32>,\n    @location(6) tex_coords_3: vec2<f32>,\n};\n\nstruct InstanceInput {\n    //@builtin(instance_index) index: u32,\n    @location(7) draw_area: vec4<f32>,\n    @location(8) model_matrix_0: vec4<f32>,\n    @location(9) model_matrix_1: vec4<f32>,\n    @location(10) model_matrix_2: vec4<f32>,\n    @location(11) model_matrix_3: vec4<f32>,\n    @location(12) normal_matrix_0: vec3<f32>,\n    @location(13) normal_matrix_1: vec3<f32>,\n    @location(14) normal_matrix_2: vec3<f32>,\n    @location(15) material_index: i32,\n};\n\nstruct VertexOutput {\n    @builtin(position) clip_position: vec4<f32>,\n    @location(0) world_pos: vec4<f32>,\n    @location(1) color: vec4<f32>,\n    @location(2) normal: vec3<f32>,\n    @location(3) view: vec3<f32>,\n    @location(4) @interpolate(flat) material_index: i32,\n    @location(5) tex_coords_base_color: vec3<f32>,\n    @location(6) tex_coords_metallic_roughness: vec3<f32>,\n    @location(7) tex_coords_normal: vec3<f32>,\n    @location(8) tex_coords_emissive: vec3<f32>,\n    @location(9) tex_coords_occlusion: vec3<f32>,\n    @location(10) tex_coords_specular_glossiness: vec3<f32>,\n    @location(11) tex_coords_diffuse: vec3<f32>,\n};\n\n\n@group(0) @binding(0)\nvar<uniform> constant_data: ConstantData;\n@group(0) @binding(1)\nvar<storage, read> dynamic_data: DynamicData;\n\n@group(1) @binding(0)\nvar default_sampler: sampler;\n@group(1) @binding(1)\nvar depth_sampler: sampler;\n\n@group(1) @binding(2)\nvar texture_1: texture_2d<f32>;\n@group(1) @binding(3)\nvar texture_2: texture_2d<f32>;\n@group(1) @binding(4)\nvar texture_3: texture_2d<f32>;\n@group(1) @binding(5)\nvar texture_4: texture_2d<f32>;\n@group(1) @binding(6)\nvar texture_5: texture_2d<f32>;\n@group(1) @binding(7)\nvar texture_6: texture_2d<f32>;\n@group(1) @binding(8)\nvar texture_7: texture_2d<f32>;\n@group(1) @binding(9)\nvar texture_8: texture_2d<f32>;\n@group(1) @binding(10)\nvar texture_9: texture_2d<f32>;\n@group(1) @binding(11)\nvar texture_10: texture_2d<f32>;\n@group(1) @binding(12)\nvar texture_11: texture_2d<f32>;\n@group(1) @binding(13)\nvar texture_12: texture_2d<f32>;\n@group(1) @binding(14)\nvar texture_13: texture_2d<f32>;\n@group(1) @binding(15)\nvar texture_14: texture_2d<f32>;\n@group(1) @binding(16)\nvar texture_15: texture_2d<f32>;\n@group(1) @binding(17)\nvar texture_16: texture_2d<f32>;\n\nfn get_textures_coord_set(v: VertexInput, material_index: i32, texture_type: u32) -> vec2<f32> {\n    let texture_data_index = dynamic_data.materials_data[material_index].textures_indices[texture_type];\n    if (texture_data_index >= 0) {\n        let textures_coord_set_index = dynamic_data.materials_data[material_index].textures_coord_set[texture_type];\n        if (textures_coord_set_index == 1u) {\n            return v.tex_coords_1;\n        } else if (textures_coord_set_index == 2u) {\n            return v.tex_coords_2;\n        } else if (textures_coord_set_index == 3u) {\n            return v.tex_coords_3;\n        }\n    }\n    return v.tex_coords_0;\n}\n\n\nfn compute_textures_coord(v: VertexInput, material_index: i32, texture_type: u32) -> vec3<f32> {\n    let tex_coords = get_textures_coord_set(v, material_index, texture_type);\n    var t = vec3<f32>(0.0, 0.0, 0.0);\n    let texture_data_index = dynamic_data.materials_data[material_index].textures_indices[texture_type];\n    if (texture_data_index >= 0) {\n        t.x = (dynamic_data.textures_data[texture_data_index].area.x + 0.5 + tex_coords.x * dynamic_data.textures_data[texture_data_index].area.z) / dynamic_data.textures_data[texture_data_index].total_width;\n        t.y = (dynamic_data.textures_data[texture_data_index].area.y + 0.5 + tex_coords.y * dynamic_data.textures_data[texture_data_index].area.w) / dynamic_data.textures_data[texture_data_index].total_height;\n        t.z = f32(dynamic_data.textures_data[texture_data_index].layer_index);\n    }\n    return t;\n}\n\n@vertex\nfn vs_main(\n    v: VertexInput,\n    instance: InstanceInput,\n) -> VertexOutput {\n    let instance_matrix = mat4x4<f32>(\n        instance.model_matrix_0,\n        instance.model_matrix_1,\n        instance.model_matrix_2,\n        instance.model_matrix_3,\n    );\n    let normal_matrix = mat3x3<f32>(\n        instance.normal_matrix_0,\n        instance.normal_matrix_1,\n        instance.normal_matrix_2,\n    );\n\n    var vertex_out: VertexOutput;\n    vertex_out.world_pos = instance_matrix * vec4<f32>(v.position, 1.0);\n    vertex_out.clip_position = constant_data.proj * constant_data.view * vertex_out.world_pos;\n    vertex_out.normal = normalize((instance_matrix * vec4<f32>(v.normal, 0.0)).xyz);\n\n    let view_pos = vec3<f32>(constant_data.view[3][0], constant_data.view[3][1], constant_data.view[3][2]);\n    vertex_out.view = view_pos - vertex_out.world_pos.xyz;\n    vertex_out.color = v.color;\n    vertex_out.material_index = instance.material_index;\n\n    if (instance.material_index >= 0) {\n        vertex_out.tex_coords_base_color = compute_textures_coord(v, instance.material_index, TEXTURE_TYPE_BASE_COLOR);\n        vertex_out.tex_coords_metallic_roughness = compute_textures_coord(v, instance.material_index, TEXTURE_TYPE_METALLIC_ROUGHNESS);\n        vertex_out.tex_coords_normal = compute_textures_coord(v, instance.material_index, TEXTURE_TYPE_NORMAL);\n        vertex_out.tex_coords_emissive = compute_textures_coord(v, instance.material_index, TEXTURE_TYPE_EMISSIVE);\n        vertex_out.tex_coords_occlusion = compute_textures_coord(v, instance.material_index, TEXTURE_TYPE_OCCLUSION);\n        vertex_out.tex_coords_specular_glossiness = compute_textures_coord(v, instance.material_index, TEXTURE_TYPE_SPECULAR_GLOSSINESS);\n        vertex_out.tex_coords_diffuse = compute_textures_coord(v, instance.material_index, TEXTURE_TYPE_DIFFUSE);\n    }\n\n    return vertex_out;\n}\n\nfn has_texture(material_index: i32, texture_type: u32) -> bool {\n    if (material_index < 0) {\n        return false;\n    }\n    if (dynamic_data.materials_data[u32(material_index)].textures_indices[texture_type] >= 0) {\n        return true;\n    }\n    return false;\n}\n\nfn get_atlas_index(material_index: i32, texture_type: u32) -> u32 {\n    if (material_index < 0) {\n        return 0u;\n    }\n    let texture_data_index = dynamic_data.materials_data[material_index].textures_indices[texture_type];\n    if (texture_data_index < 0) {\n        return 0u;\n    }\n    return dynamic_data.textures_data[texture_data_index].texture_index;\n}\n\nfn get_texture_color(material_index: i32, texture_type: u32, tex_coords: vec3<f32>) -> vec4<f32> {\n    if (material_index < 0) {\n        return vec4<f32>(0.0, 0.0, 0.0, 0.0);\n    }\n    let atlas_index = get_atlas_index(material_index, texture_type);   \n\n    if (atlas_index == 1u) {\n        return textureSampleLevel(texture_2, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 2u) {\n        return textureSampleLevel(texture_3, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 3u) {\n        return textureSampleLevel(texture_4, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 4u) {\n        return textureSampleLevel(texture_5, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 5u) {\n        return textureSampleLevel(texture_6, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 6u) {\n        return textureSampleLevel(texture_7, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 7u) {\n        return textureSampleLevel(texture_8, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 8u) {\n        return textureSampleLevel(texture_9, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 9u) {\n        return textureSampleLevel(texture_10, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 10u) {\n        return textureSampleLevel(texture_11, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 11u) {\n        return textureSampleLevel(texture_12, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 12u) {\n        return textureSampleLevel(texture_13, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 13u) {\n        return textureSampleLevel(texture_14, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 14u) {\n        return textureSampleLevel(texture_15, default_sampler, tex_coords.xy, tex_coords.z);\n    } else if (atlas_index == 15u) {\n        return textureSampleLevel(texture_16, default_sampler, tex_coords.xy, tex_coords.z);\n    }\n    return textureSampleLevel(texture_1, default_sampler, tex_coords.xy, tex_coords.z);\n}\n\nstruct SurfaceInfo {\n    color: vec4<f32>,\n    albedo: vec3<f32>,\n    metallic: f32,\n    roughness: f32,\n    normal: vec3<f32>,\n    f0: vec3<f32>,\n    ao: f32,\n    emissive: vec3<f32>,\n    v: vec3<f32>\n};\n\nfn get_surface_info(v: VertexOutput) -> SurfaceInfo {\n    var surface : SurfaceInfo;\n    surface.v = normalize(v.view);\n    surface.normal = normalize(v.normal);\n    surface.ao = 1.0;\n    surface.color = v.color;\n\n    if (v.material_index < 0) {\n        return surface;\n    }\n    let material = dynamic_data.materials_data[v.material_index];\n    surface.color = surface.color * material.base_color;\n    if (has_texture(v.material_index, TEXTURE_TYPE_BASE_COLOR)) {\n        surface.color = surface.color * get_texture_color(v.material_index, TEXTURE_TYPE_BASE_COLOR, v.tex_coords_base_color);\n    }\n\n    surface.albedo = surface.color.rgb;\n    surface.emissive = material.emissive_color.rgb;\n    surface.metallic = material.metallic_factor;\n    surface.roughness = material.roughness_factor;\n\n    if (has_texture(v.material_index, TEXTURE_TYPE_METALLIC_ROUGHNESS)) {\n        let metallic_roughness = get_texture_color(v.material_index, TEXTURE_TYPE_METALLIC_ROUGHNESS, v.tex_coords_metallic_roughness);\n        surface.metallic = surface.metallic * metallic_roughness.b;\n        surface.roughness = surface.roughness * metallic_roughness.g;\n    }\n\n    let dielectric_specular = vec3<f32>(0.04, 0.04, 0.04);\n    surface.f0 = mix(dielectric_specular, surface.albedo, vec3<f32>(surface.metallic, surface.metallic, surface.metallic));\n\n    if (has_texture(v.material_index, TEXTURE_TYPE_OCCLUSION)) {\n        let ao = get_texture_color(v.material_index, TEXTURE_TYPE_OCCLUSION, v.tex_coords_occlusion);\n        surface.ao = ao.r * material.alpha_cutoff;\n    }\n\n    if (has_texture(v.material_index, TEXTURE_TYPE_EMISSIVE)) {\n        let emissive = get_texture_color(v.material_index, TEXTURE_TYPE_EMISSIVE, v.tex_coords_emissive);\n        surface.emissive = surface.emissive * emissive.rgb;\n    }\n\n    return surface;\n}\n\n\nfn compute_fresnel_schlick(cosTheta: f32, F0: vec3<f32>) -> vec3<f32> {\n    return F0 + (vec3<f32>(1.0, 1.0, 1.0) - F0) * pow(1.0 - cosTheta, 5.0);\n}\nfn compute_distribution_GGX(N: vec3<f32>, H: vec3<f32>, roughness: f32) -> f32 {\n    let a = roughness * roughness;\n    let a2 = a * a;\n    let NdotH = max(dot(N, H), 0.0);\n    let NdotH2 = NdotH * NdotH;\n    let num = a2;\n    let denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    return num / (PI * denom * denom);\n}\nfn compute_geometry_schlick_GGX(NdotV: f32, roughness: f32) -> f32 {\n    let r = (roughness + 1.0);\n    let k = (r * r) / 8.0;\n    let num = NdotV;\n    let denom = NdotV * (1.0 - k) + k;\n    return num / denom;\n}\nfn compute_geometry_smith(N: vec3<f32>, V: vec3<f32>, L: vec3<f32>, roughness: f32) -> f32 {\n    let NdotV = max(dot(N, V), 0.0);\n    let NdotL = max(dot(N, L), 0.0);\n    let ggx2 = compute_geometry_schlick_GGX(NdotV, roughness);\n    let ggx1 = compute_geometry_schlick_GGX(NdotL, roughness);\n    return ggx1 * ggx2;\n}\nfn compute_range_attenuation(range: f32, distance: f32) -> f32 {\n    if (range <= 0.0) {\n      // Negative range means no cutoff\n        return 1.0 / pow(distance, 2.0);\n    }\n    return clamp(1.0 - pow(distance / range, 4.0), 0.0, 1.0) / pow(distance, 2.0);\n}\nfn compute_light_radiance(position: vec3<f32>, light: LightData, surface: SurfaceInfo) -> vec3<f32> {\n    let point_to_light = light.position - position;\n    let L = normalize(point_to_light);\n    let H = normalize(surface.v + L);\n    let distance = length(point_to_light);\n  // cook-torrance brdf\n    let NDF = compute_distribution_GGX(surface.normal, H, surface.roughness);\n    let G = compute_geometry_smith(surface.normal, surface.v, L, surface.roughness);\n    let F = compute_fresnel_schlick(max(dot(H, surface.v), 0.0), surface.f0);\n    let kD = (vec3<f32>(1.0, 1.0, 1.0) - F) * (1.0 - surface.metallic);\n    let NdotL = max(dot(surface.normal, L), 0.0);\n    let numerator = NDF * G * F;\n    let denominator = max(4.0 * max(dot(surface.normal, surface.v), 0.0) * NdotL, 0.001);\n    let specular = numerator / vec3<f32>(denominator, denominator, denominator);\n    // add to outgoing radiance Lo\n    let attenuation = compute_range_attenuation(light.range, distance);\n    let radiance = light.color.rgb * light.intensity * attenuation;\n    return (kD * surface.albedo / vec3<f32>(PI, PI, PI) + specular) * radiance * NdotL;\n}\n\n  // linear <-> sRGB conversions\nfn linear_to_srgb(color: vec3<f32>) -> vec3<f32> {\n    if (all(color <= vec3<f32>(0.0031308, 0.0031308, 0.0031308))) {\n        return color * 12.92;\n    }\n    return (pow(abs(color), vec3<f32>(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4)) * 1.055) - vec3<f32>(0.055, 0.055, 0.055);\n}\nfn srgb_to_linear(color: vec3<f32>) -> vec3<f32> {\n    if (all(color <= vec3<f32>(0.04045, 0.04045, 0.04045))) {\n        return color / vec3<f32>(12.92, 12.92, 12.92);\n    }\n    return pow((color + vec3<f32>(0.055, 0.055, 0.055)) / vec3<f32>(1.055, 1.055, 1.055), vec3<f32>(2.4, 2.4, 2.4));\n}\n\n@fragment\nfn fs_main(v: VertexOutput) -> @location(0) vec4<f32> {\n    let surface = get_surface_info(v);\n    \n    // reflectance equation\n    var color_from_light = vec3<f32>(0.0, 0.0, 0.0);\n\n    var i = 0u;\n    loop {\n        if (dynamic_data.lights_data[i].light_type == 0u) {\n            break;\n        }\n        \n        // calculate per-light radiance and add to outgoing radiance Lo\n        color_from_light = color_from_light + compute_light_radiance(v.world_pos.xyz, dynamic_data.lights_data[i], surface);\n        i = i + 1u;\n    }\n\n    let ambient = surface.albedo * surface.ao;\n    let color = linear_to_srgb(color_from_light + ambient + surface.emissive);\n    return vec4<f32>(color, surface.color.a);\n}\n"}